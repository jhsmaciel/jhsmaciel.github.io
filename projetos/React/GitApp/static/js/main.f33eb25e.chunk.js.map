{"version":3,"sources":["assets/github-logo.svg","assets/github-background.svg","config/index.ts","pages/dashboard/styles.ts","services/api.ts","pages/dashboard/index.tsx","pages/repository/styles.ts","pages/repository/index.tsx","routes/index.tsx","styles/global.ts","App.tsx","index.tsx"],"names":["module","exports","colors","Title","styled","h1","Form","form","hasError","shade","Repositories","div","Error","span","api","axios","create","baseURL","Dashboard","useState","search","setSearch","messageError","setMessageError","storagedRepositories","localStorage","getItem","JSON","parse","repositories","setRepositories","e","a","preventDefault","get","response","data","useEffect","setItem","stringify","src","githubLogo","alt","onSubmit","placeholder","value","onChange","target","type","map","repo","key","id","to","full_name","owner","avatar_url","login","description","size","Header","header","RepositoryInfo","section","Issues","Repository","params","useRouteMatch","repository","setRepository","issues","setIssues","Promise","all","repositoryResp","issuesResp","loadValues","stargazers_count","forks_count","open_issues_count","issue","href","html_url","title","user","Routes","path","exact","component","createGlobalStyle","gitHubBackground","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f33eb25e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/github-logo.04f6798f.svg\";","module.exports = __webpack_public_path__ + \"static/media/github-background.0b819d63.svg\";","export const colors = {\n    primary: '#3A3A3A',\n    secondary: '#A8A8B3',\n    info: '#3D3D4D',\n    background: '#F0F0F5',\n    success: '#04D361',\n    error: '#C53030',\n    disabled: '#A8B8B3',\n    svg: '#CBCBD6',\n};\n","import styled from 'styled-components';\nimport { shade } from 'polished';\nimport { colors } from '../../config';\n\ninterface FormProps {\n    hasError: boolean;\n}\n\nexport const Title = styled.h1`\n    font-size: 48px;\n    color: ${colors.primary};\n    margin-top: 80px;\n    max-width: 450px;\n    line-height: 56px;\n`;\n\nexport const Form = styled.form<FormProps>`\n    margin-top: 40px;\n    max-width: 700px;\n    display: flex;\n\n    input {\n        flex: 1;\n        height: 70px;\n        padding: 0 24px;\n        border: 2px solid ${({ hasError }) => (hasError ? colors.error : '#FFF')};\n        border-right: 0;\n        border-radius: 5px 0 0 5px;\n        color: ${colors.primary};\n\n        &::placeholder {\n            color: ${colors.disabled};\n        }\n    }\n\n    button {\n        width: 210px;\n        height: 70px;\n        background: ${colors.success};\n        border-radius: 0 5px 5px 0;\n        border: 0;\n        color: #fff;\n        font-weight: bold;\n        transition: background-color 0.2s;\n\n        &:hover {\n            background: ${shade(0.2, colors.success)};\n        }\n    }\n`;\n\nexport const Repositories = styled.div`\n    margin-top: 80px;\n    max-width: 700px;\n    a {\n        background: #fff;\n        border-radius: 5px;\n        width: 100%;\n        padding: 24px;\n        display: block;\n        text-decoration: none;\n        display: flex;\n        align-items: center;\n        transition: transform 0.2s;\n\n        &:hover {\n            transform: translate(10px);\n        }\n\n        & + a {\n            margin-top: 16px;\n        }\n\n        img {\n            width: 64px;\n            height: 64px;\n            border-radius: 50%;\n        }\n\n        div {\n            margin-left: 16px;\n            flex: 1;\n            strong {\n                font-size: 20px;\n                color: ${colors.info};\n            }\n\n            p {\n                font-size: 18px;\n                color: ${colors.secondary};\n                margin-top: 4px;\n            }\n        }\n\n        svg {\n            margin-left: auto;\n            color: ${colors.svg};\n        }\n    }\n`;\n\nexport const Error = styled.span`\n    display: block;\n    color: ${colors.error};\n    margin-top: 8px;\n`;\n","import axios from 'axios';\n\nconst api = axios.create({\n    baseURL: 'https://api.github.com/',\n});\n\nexport default api;\n","import React, { useState, useEffect, FormEvent } from 'react';\nimport { FiChevronRight } from 'react-icons/fi';\nimport { Link } from 'react-router-dom';\nimport githubLogo from '../../assets/github-logo.svg';\nimport { Title, Form, Repositories, Error } from './styles';\nimport api from '../../services/api';\n\nexport interface Repository {\n    id: number;\n    full_name: string;\n    description: string;\n    owner: {\n        login: string;\n        id: number;\n        avatar_url: string;\n    };\n}\n\nconst Dashboard: React.FC = () => {\n    const [search, setSearch] = useState<string>('');\n    const [messageError, setMessageError] = useState<string>('');\n    const [repositories, setRepositories] = useState<Array<Repository>>(() => {\n        const storagedRepositories = localStorage.getItem('@GitHubExplorer:repositories');\n        if (storagedRepositories) return JSON.parse(storagedRepositories);\n        return [];\n    });\n\n    useEffect(() => {\n        localStorage.setItem('@GitHubExplorer:repositories', JSON.stringify(repositories));\n    }, [repositories]);\n\n    async function handleAddRepository(e: FormEvent<HTMLFormElement>) {\n        e.preventDefault();\n        if (!search) {\n            setMessageError('Digite o nome do repositório. Ex: facebook/react');\n            return;\n        }\n        try {\n            const response = await api.get<Repository>(`repos/${search}`);\n            setRepositories([...repositories, response.data]);\n            setSearch('');\n            setMessageError('');\n        } catch (error) {\n            setMessageError('Repositório não encontrado.');\n        }\n    }\n\n    return (\n        <>\n            <img src={githubLogo} alt=\"Github Explorer\" />\n            <Title>Explore repositórios no GitHub</Title>\n            <Form hasError={!!messageError} onSubmit={handleAddRepository}>\n                <input\n                    placeholder=\"Digite o nome do repositório\"\n                    value={search}\n                    onChange={(e) => setSearch(e.target.value)}\n                />\n                <button type=\"submit\">Pesquisar</button>\n            </Form>\n            {messageError && <Error>{messageError}</Error>}\n            <Repositories>\n                {repositories.map((repo) => (\n                    <Link key={repo.id} to={`/repository/${repo.full_name}`}>\n                        <img src={repo.owner.avatar_url} alt={repo.owner.login} />\n                        <div>\n                            <strong>{repo.full_name}</strong>\n                            <p>{repo.description}</p>\n                        </div>\n                        <FiChevronRight size={20} />\n                    </Link>\n                ))}\n            </Repositories>\n        </>\n    );\n};\n\nexport default Dashboard;\n","import styled from 'styled-components';\nimport { colors } from '../../config';\n\nexport const Header = styled.header`\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    a {\n        display: flex;\n        align-items: center;\n        text-decoration: none;\n        color: ${colors.secondary};\n        transition: color 0.2s;\n        &:hover {\n            color: #666;\n        }\n        svg {\n            margin-right: 4px;\n        }\n    }\n`;\n\nexport const RepositoryInfo = styled.section`\n    margin-top: 80px;\n\n    header {\n        display: flex;\n        align-items: center;\n\n        img {\n            width: 120px;\n            height: 120px;\n            border-radius: 50%;\n        }\n\n        div {\n            margin-left: 24px;\n\n            strong {\n                font-size: 36px;\n                color: ${colors.info};\n            }\n\n            p {\n                font-size: 18px;\n                color: ${colors.secondary};\n                margin-top: 4px;\n            }\n        }\n    }\n\n    ul {\n        display: flex;\n        list-style: none;\n        margin-top: 40px;\n\n        li {\n            & + li {\n                margin-left: 80px;\n            }\n            strong {\n                display: block;\n                font-size: 36px;\n                color: ${colors.info};\n            }\n\n            span {\n                display: block;\n                margin-top: 4px;\n                color: #6c6c80;\n            }\n        }\n    }\n`;\n\nexport const Issues = styled.div`\n    margin-top: 80px;\n\n    a {\n        background: #fff;\n        border-radius: 5px;\n        width: 100%;\n        padding: 24px;\n        display: block;\n        text-decoration: none;\n        display: flex;\n        align-items: center;\n        transition: transform 0.2s;\n\n        &:hover {\n            transform: translate(10px);\n        }\n\n        & + a {\n            margin-top: 16px;\n        }\n\n        div {\n            margin-left: 16px;\n            flex: 1;\n            strong {\n                font-size: 20px;\n                color: ${colors.info};\n            }\n\n            p {\n                font-size: 18px;\n                color: ${colors.secondary};\n                margin-top: 4px;\n            }\n        }\n\n        svg {\n            margin-left: auto;\n            color: ${colors.svg};\n        }\n    }\n`;\n","import React, { useEffect, useState } from 'react';\nimport { useRouteMatch, Link } from 'react-router-dom';\nimport { FiChevronLeft, FiChevronRight } from 'react-icons/fi';\nimport githubLogo from '../../assets/github-logo.svg';\nimport { Header, RepositoryInfo, Issues } from './styles';\nimport { Repository as RP } from '../dashboard';\nimport api from '../../services/api';\n\ninterface RepositoryParams {\n    repository: string;\n}\n\ninterface RepositoryInfo extends RP {\n    stargazers_count: number;\n    forks_count: number;\n    open_issues_count: number;\n}\n\ninterface Issue {\n    id: number;\n    title: string;\n    html_url: string;\n    user: {\n        login: string;\n    };\n}\n\nconst Repository: React.FC = () => {\n    const { params } = useRouteMatch<RepositoryParams>();\n    const [repository, setRepository] = useState<RepositoryInfo | null>(null);\n    const [issues, setIssues] = useState<Issue[]>([]);\n\n    useEffect(() => {\n        async function loadValues() {\n            const [repositoryResp, issuesResp] = await Promise.all([\n                api.get<RepositoryInfo>(`/repos/${params.repository}`),\n                api.get<Issue[]>(`/repos/${params.repository}/issues`),\n            ]);\n            setRepository(repositoryResp.data);\n            setIssues(issuesResp.data);\n        }\n\n        loadValues();\n    }, [params.repository]);\n    return (\n        <>\n            <Header>\n                <img src={githubLogo} alt=\"Github Explorer\" />\n                <Link to=\"/\">\n                    <FiChevronLeft size={16} />\n                    Voltar\n                </Link>\n            </Header>\n\n            {repository && (\n                <RepositoryInfo>\n                    <header>\n                        <img src={repository.owner.avatar_url} alt={repository.owner.login} />\n                        <div>\n                            <strong>{repository.full_name}</strong>\n                            <p>{repository.description}</p>\n                        </div>\n                    </header>\n                    <ul>\n                        <li>\n                            <strong>{repository.stargazers_count}</strong>\n                            <span>Stars</span>\n                        </li>\n                        <li>\n                            <strong>{repository.forks_count}</strong>\n                            <span>Forks</span>\n                        </li>\n                        <li>\n                            <strong>{repository.open_issues_count}</strong>\n                            <span>Issues abertas</span>\n                        </li>\n                    </ul>\n                </RepositoryInfo>\n            )}\n\n            <Issues>\n                {issues.map((issue) => {\n                    return (\n                        <a key={issue.id} href={issue.html_url}>\n                            <div>\n                                <strong>{issue.title}</strong>\n                                <p>{issue.user.login}</p>\n                            </div>\n                            <FiChevronRight size={20} />\n                        </a>\n                    );\n                })}\n            </Issues>\n        </>\n    );\n};\n\nexport default Repository;\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Dashboard from '../pages/dashboard';\nimport Repository from '../pages/repository';\n\nconst Routes: React.FC = () => (\n    <Switch>\n        <Route path=\"/\" exact component={Dashboard} />\n        <Route path=\"/repository/:repository+\" component={Repository} />\n    </Switch>\n);\n\nexport default Routes;\n","import { createGlobalStyle } from 'styled-components';\nimport { colors } from '../config';\nimport gitHubBackground from '../assets/github-background.svg';\n\nexport default createGlobalStyle`\n    * {\n        margin: 0;\n        padding: 0;\n        outline: 0;\n        box-sizing: border-box;\n    }\n\n    body {\n        background: ${colors.background} url(${gitHubBackground}) no-repeat 70% top;\n        --webkit-font-smoothing: antialiased;\n    }\n\n    body, input, button {\n        font: 16px Roboto, sans-serif;\n    }\n\n    #root {\n        max-width: 960px;\n        margin: 0 auto;\n        padding: 40px 20px;\n    }\n\n    button {\n        cursor: pointer;\n    }\n`;\n","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport Routes from './routes';\nimport GlobalStyle from './styles/global';\n\nconst App: React.FC = () => (\n    <>\n        <BrowserRouter>\n            <Routes />\n        </BrowserRouter>\n        <GlobalStyle />\n    </>\n);\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n"],"sourceRoot":""}